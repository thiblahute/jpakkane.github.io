fragment_downloaded_cb({"url": "Generating-sources.html#using-generator", "fragment": "Using generator \nGenerators are similar to custom targets except that we define a generator which defines how to transform an input file into one or more output files and then use that on as many input files as we want. \nNote that generators should only be used for outputs that will only be used as inputs for a build target or a custom target. When you use the processed output of a generator in multiple targets the generator will be run multiple times to create outputs for each target. Each output will be created in a target private directory BUILD_DIR \nIf you want to generate files for general purposes such as for generating headers to be used by several sources or data that will be installed and so on use a custom_target instead. \nThe first argument is the executable file to run. The next file specifies a name generation rule. It specifies how to build the output file name for a given input name. BASENAME is a placeholder for the input file name without preceding path or suffix if any So if the input file name were some path filename.idl then the output name would be filename.c. You can also use PLAINNAME which preserves the suffix which would result in a file called filename.idl.c. The last line specifies the command line arguments to pass to the executable. INPUT and OUTPUT are placeholders for the input and output files respectively and will be automatically filled in by Meson. If your rule produces multiple output files and you need to pass them to the command line append the location to the output holder like this OUTPUT0 OUTPUT1 and so on. \nWith this rule specified we can generate source files and add them to a target. \nGenerators can also generate multiple output files with unknown names \nIn this case you can not use the plain OUTPUT variable as it would be ambiguous. This program only needs to know the output directory it will generate the file names by itself. \n"});